plugins {
    id 'java-gradle-plugin'
    id 'jacoco'
    id 'maven-publish'
    id 'org.ajoberstar.reckon' version '0.13.0'
    id 'org.sonarqube' version '3.0'
    id 'com.gradle.plugin-publish' version '0.12.0'
    id 'be.vbgn.ci-detect' version '0.5.0'
    id 'be.vbgn.dev-conventions.opinion' version '0.3.0'
    id 'nebula.integtest' version '7.0.9'
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
}


import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group 'eu.xenit.gradle'


sourceCompatibility = 11

configurations {
    packaged
    compileOnly.extendsFrom(packaged)
    testCompile.extendsFrom(packaged)
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    packaged 'org.json:json:20201115'
    implementation 'de.marcphilipp.gradle:nexus-publish-plugin:0.4.0'
    integTestImplementation "commons-io:commons-io:2.8.0"
    testImplementation 'junit:junit:4.12'
}

task shadowJar(type: ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.packaged]
    archiveClassifier = "shadow"
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"
}

task configureShadowJar(type: ConfigureShadowRelocation) {
    target = shadowJar
    prefix = "eu.xenit.gradle.enterprise.conventions.internal.shadow"
}

shadowJar.dependsOn(configureShadowJar)

jar {
    from zipTree(shadowJar.outputs.files.singleFile)
    dependsOn(shadowJar)
}

gradlePlugin {
    plugins {
        privatePlugin {
            id = 'eu.xenit.enterprise-conventions.private'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.PrivatePlugin'
        }
        privateInitPlugin {
            id = 'eu.xenit.enterprise-conventions.private.init'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.PrivateInitPlugin'
        }
        ossPlugin {
            id = 'eu.xenit.enterprise-conventions.oss'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.OssPlugin'
        }
        repositoryExtensionsPlugin {
            id = 'eu.xenit.enterprise-conventions.ext.repository'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.extensions.repository.RepositoryExtensionsPlugin'
        }
    }
    testSourceSets(sourceSets.integTest)
}

pluginBundle {
    vcsUrl = "https://github.com/xenit-eu/enterprise-gradle-plugin"
    website = vcsUrl
    description = "Xenit OSS and private conventions plugins"

    plugins {
        privatePlugin {
            displayName = "Xenit private conventions plugin"
            description = "Configures conventions for Xenit private packages"
        }
        privateInitPlugin {
            displayName = "Xenit private initscript plugin"
            description = "Configures conventions for Xenit private & oss packages: initscript plugin for Xenit developers"
        }
        ossPlugin {
            displayName = "Xenit OSS conventions plugin"
            description = "Configures conventions for Xenit open source packages"
        }
    }
}

evaluationDependsOn(":integration-test-fakes")

project(":integration-test-fakes").dockerCompose.isRequiredBy(integrationTest)

integrationTest {
    if (gradle.startParameter.offline) {
        systemProperty "eu.xenit.enterprise.conventions.integration.gradle-offline", "true"
    }
}

pluginUnderTestMetadata {
    pluginClasspath.from(configurations.packaged)
}
