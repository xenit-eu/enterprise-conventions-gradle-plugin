plugins {
    id 'jacoco'
    id 'org.ajoberstar.reckon' version '0.13.2'
    id 'org.sonarqube' version '3.0'
    id 'com.gradle.plugin-publish' version '1.2.0'
    id 'be.vbgn.ci-detect' version '0.5.0'
    id 'be.vbgn.dev-conventions.opinion' version '0.5.0'
    id 'nebula.integtest' version '7.0.9'
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
    id "io.freefair.lombok" version "5.3.0"
    id 'groovy'
}


import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

group 'eu.xenit.gradle'

reckon {
    scopeFromProp()
    stageFromProp('alpha', 'beta', 'rc', 'final')
}

facets {
    java17 {
        parentSourceSet = 'main'
    }
}

lombok {
    version = "1.18.30"
}

sourceCompatibility = 11

configurations {
    packaged
    compileOnly.extendsFrom(packaged)
    testCompile.extendsFrom(packaged)
    matching({ config -> config.name.startsWith('java17')}).configureEach {
        attributes {
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 17)
        }
    }

    java17ApiElements {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom(apiElements)
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 17)
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }
    }
    java17RuntimeElements {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom(runtimeElements)
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 17)
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    packaged 'commons-lang:commons-lang:2.5'
    implementation 'de.marcphilipp.gradle:nexus-publish-plugin:0.4.0'

    compileOnly 'com.bmuschko:gradle-docker-plugin:9.4.0'
    java17CompileOnly 'org.springframework.boot:spring-boot-gradle-plugin:3.2.2'

    integTestImplementation "commons-io:commons-io:2.8.0"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.7.7'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
}

task shadowJar(type: ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.packaged]
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"
}

task configureShadowJar(type: ConfigureShadowRelocation) {
    target = shadowJar
    prefix = "eu.xenit.gradle.enterprise.conventions.internal.shadow"
}
shadowJar.dependsOn(configureShadowJar)

jar {
    enabled = false
}

task java17Jar(type: ShadowJar) {
    from provider({ zipTree(shadowJar.archiveFile.get()) })
    from sourceSets.java17.output
    archiveClassifier = "java17"
    mergeServiceFiles()
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"
    dependsOn(shadowJar)
}

compileJava17Java {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 17
}

artifacts {
    apiElements(shadowJar.archiveFile) {
        builtBy(shadowJar)
    }
    runtimeElements(shadowJar.archiveFile) {
        builtBy(shadowJar)
    }
    java17ApiElements(java17Jar.archiveFile) {
        builtBy(java17Jar)
    }
    java17RuntimeElements(java17Jar.archiveFile) {
        builtBy(java17Jar)
    }
}

AdhocComponentWithVariants javaComponent = (AdhocComponentWithVariants) project.components.findByName("java")
javaComponent.addVariantsFromConfiguration(configurations.java17ApiElements) {

}
javaComponent.addVariantsFromConfiguration(configurations.java17RuntimeElements) {

}

gradlePlugin {
    plugins {
        privatePlugin {
            id = 'eu.xenit.enterprise-conventions.private'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.PrivatePlugin'
            displayName = "Xenit private conventions plugin"
            description = "Configures conventions for Xenit private packages"
        }
        ossPlugin {
            id = 'eu.xenit.enterprise-conventions.oss'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.OssPlugin'
            displayName = "Xenit OSS conventions plugin"
            description = "Configures conventions for Xenit open source packages"
        }
        repositoryExtensionsPlugin {
            id = 'eu.xenit.enterprise-conventions.ext.repository'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.extensions.repository.RepositoryExtensionsPlugin'
            displayName = "Xenit conventions plugin: Repository extension"
            description = "Configures additional repository shorthands"
        }
        signingExtensionsPlugin {
            id = 'eu.xenit.enterprise-conventions.ext.signing'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.extensions.signing.AutomaticSigningPlugin'
            displayName = "Xenit conventions plugin: Signing extension"
            description = "Automatically configures artifact signing"
        }
        centralRequirementsPlugin {
            id = 'eu.xenit.enterprise-conventions.ext.maven-central-requirements'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.extensions.mavencentralrequirements.MavenCentralRequirementsCheckPlugin'
            displayName = "Xenit conventions plugin: Maven Central requirements check"
            description = "Performs pre-publish check for requirements for publishing to Maven Central, also when publishing snapshots"
        }
        dockerImageLabelsPlugin {
            id = 'eu.xenit.enterprise-conventions.ext.docker-image-labels'
            implementationClass = 'eu.xenit.gradle.enterprise.conventions.extensions.dockerimagelabels.DockerImageLabelsPlugin'
            displayName = "Xenit conventions plugin: OCI source labels for Docker images"
            description = "Adds OCI annotations to Docker images indicating the source repository and commit"
        }
    }
    testSourceSets(sourceSets.integTest)
}

pluginBundle {
    vcsUrl = "https://github.com/xenit-eu/enterprise-conventions-gradle-plugin"
    website = vcsUrl
    description = "Xenit OSS and private conventions plugins"
    tags = ["conventions", "repository-replacement", "repositories", "security"]
}

integrationTest {
    if (gradle.startParameter.offline) {
        systemProperty "eu.xenit.enterprise.conventions.integration.gradle-offline", "true"
    }
}

pluginUnderTestMetadata {
    pluginClasspath.from(configurations.packaged)
}
